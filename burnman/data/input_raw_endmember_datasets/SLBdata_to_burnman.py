# This file is part of BurnMan - a thermoelastic and thermodynamic toolkit for the Earth and Planetary Sciences
# Copyright (C) 2012 - 2015 by the BurnMan team, released under the GNU GPL v2 or later.


# This is a standalone program that converts a tabulated version of the Stixrude and Lithgow-Bertelloni data format into the standard burnman format (printed to stdout)


import sys

def read_dataset(datafile):
    f=open(datafile,'r')
    ds=[]
    for line in f:
        ds.append(line.decode('utf-8').split())
    return ds

ds=read_dataset('slb_2011.txt')
landau=read_dataset('slb_2011_landau.txt')
landau_params = []
for line in landau:
    phase = str(line[0])
    if phase != '#':
        landau_params.append([phase, [float(line[1]), float(line[2])*1.e-6, float(line[3])]])

print '# This file is part of BurnMan - a thermoelastic and thermodynamic toolkit for the Earth and Planetary Sciences'
print '# Copyright (C) 2012 - 2015 by the BurnMan team, released under the GNU GPL v2 or later.'
print ''
print ''
print '"""'
print 'SLB_2011'
print 'Minerals from Stixrude & Lithgow-Bertelloni 2011 and references therein'
print 'File autogenerated using SLBdata_to_burnman.py'
print '"""'
print ''
print 'from __future__ import absolute_import'
print ''
print 'from ..mineral import Mineral'
print 'from ..solidsolution import SolidSolution'
print 'from ..solutionmodel import *'
print 'from ..processchemistry import read_masses, dictionarize_formula, formula_mass'
print ''
print 'atomic_masses=read_masses()'
print ''

param_scales = [ -1., -1., #not nubmers, so we won't scale
                  1.e3, 1.e3, #KJ -> J
                  1.e-6, 1.e-6, #cm^3/mol -> m^3/mol
                  1.e9, 1.e9, #GPa -> Pa
                  1.0, 1.0, # no scale for K'
                  1.0, 1.0, # no scale for Debye
                  1.0, 1.0, # no scale for gruneisen
                  1.0, 1.0, # no scale for q
                  1.e9, 1.e9, #GPa -> Pa
                  1.0, 1.0, # no scale for G'
                  1.0, 1.0] # no scale for eta_s 


solutionfile='slb_2011_solutions.txt'
with open(solutionfile, 'r') as fin:
    print fin.read()
fin.close()

print '"""'
print 'ENDMEMBERS'
print '"""'             
print ''
formula='0'
for idx, m in enumerate(ds):
    if idx == 0:
        param_names=m
    else:
        print 'class', m[0].lower(), '(Mineral):'
        print '    def __init__(self):'
        print ''.join(['        formula=\'',m[1],'\''])
        print '        formula = dictionarize_formula(formula)'
        print '        self.params = {'
        print ''.join(['            \'name\': \'', m[0], '\','])
        print '            \'formula\': formula,'
        print '            \'equation_of_state\': \'slb3\','
        for pid, param in enumerate(m):
            if pid > 1 and pid%2 == 0:
                print '            \''+param_names[pid]+'\':', float(param)*param_scales[pid], ','
        print '            \'n\': sum(formula.values()),'
        print '            \'molar_mass\': formula_mass(formula, atomic_masses)}'
        print ''
        for landau in landau_params:
            if landau[0] == m[0]:
                print '        self.property_modifiers = [['
                print '            \'landau\', {\'Tc_0\':', landau[1][0], ', \'S_D\':', landau[1][2], ', \'V_D\':', landau[1][1], '}]]'
        print ''
        print '        self.uncertainties = {'
        for pid, param in enumerate(m):
            if pid > 1 and pid%2 == 1 and pid<21:
                print '            \''+param_names[pid]+'\':', float(param)*param_scales[pid], ','
        pid=21
        param=m[pid]
        print '            \''+param_names[pid]+'\':', float(param)*param_scales[pid], '}'
        print '        Mineral.__init__(self)'
        print ''



aliasfile='slb_2011_aliases.txt'
with open(aliasfile, 'r') as fin:
    print fin.read()
fin.close()
